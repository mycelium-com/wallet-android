apply plugin: 'com.android.application'

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath androidBuildArtifact
    }
}

configurations {
    compile.exclude group: 'org.apache.httpcomponents', module: 'httpclient'
}

dependencies {
    testCompile "junit:junit:$junitVersion"
    androidTestCompile "junit:junit:$junitVersion"
    androidTestCompile 'com.android.support:support-annotations:23.3.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'

    compile project(includePrefix + ':libs:zxing-android')
    compile project(includePrefix + ':coinapult')
    compile project(includePrefix + ':wapi')
    compile project(includePrefix + ':trezor')
    compile project(includePrefix + ':lt-api')
    compile(project(includePrefix + ':mbwlib')) {
        exclude module: 'jcip-annotations'
    }
    compile project(includePrefix + ':btchip')
    compile project(includePrefix + ':LVL')

    compile guavaArtifact
    // TODO: upgrade this! and remove the exclude support-v4 below
    //not upgrading. This will be removed from the core app
    compile('com.google.android.gms:play-services-base:7.8.0') {
        exclude module: 'support-v4'
    }
    compile('com.google.android.gms:play-services-gcm:7.8.0') {
        exclude module: 'support-v4'
    }
    compile('com.google.code.findbugs:annotations:3.0.1') {
        exclude module: 'jsr305'
    }
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.1.0'
    compile 'com.squareup:otto:1.3.4'
    compile 'com.android.support:appcompat-v7:19.1.0'
    compile 'com.android.support:support-v4:19.1.0'
    compile 'com.android.support:recyclerview-v7:22.2.0'
    compile 'org.ocpsoft.prettytime:prettytime:3.2.5.Final'
    compile 'de.cketti.library.changelog:ckchangelog:1.2.2'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.jakewharton:butterknife:8.1.0'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.android.support:multidex:1.0.1'
    compile 'commons-codec:commons-codec:1.5'
    compile 'com.google.protobuf:protobuf-java:3.1.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha7'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.1.0'
}

def versionNr = '2.9'

android {
    configurations {
        all*.exclude module: 'jcip-annotations'
        all*.exclude module: 'jsr305'
    }
    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode = true
    }
    lintOptions {
        //gradle build complains about com.android.support:support-v4:22.2.0 not being compatible
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
        // bitcoinj brings in a native library for x86_64, which seems to confuse the playstore upload - just strip the file
        exclude 'lib/x86_64/darwin/libscrypt.dylib'
    }

    compileOptions {
        sourceCompatibility = 'VERSION_1_7'
        targetCompatibility = 'VERSION_1_7'
    }

    buildToolsVersion androidSdkBuildVersion

    defaultConfig {
        versionCode 290000 + getGitCommitCount()
        versionName versionNr + "." + getGitCommitCount()
        buildConfigField "String", "GIT_COMMIT_URL", "\"" + getGitCommitUrl() + "\""
        buildConfigField "String", "GIT_REPO_URL", "\"" + getGitRepoUrl() + "\""
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias = ''
        }
        btctestnet {
            keyAlias = ''
        }
        commonDebug {
            storeFile commonDebugKeystore
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            minifyEnabled !project.hasProperty('skipProguard')
            proguardFile 'mbw.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def file = output.outputFile
                    if (file != null && file.name.endsWith('.apk')) {
                        def versionExtension = "-" + defaultConfig.versionName + "build" + defaultConfig.versionCode + ".apk"
                        output.outputFile = new File(file.parent, file.name.replace(".apk", versionExtension))
                    }
                }
            }
        }
        debug {
            applicationIdSuffix '.debug'
            debuggable true
        }
    }

    productFlavors {
        prodnet {
            compileSdkVersion 21
            targetSdkVersion 19
            minSdkVersion 14

            applicationId 'com.mycelium.wallet'
            versionName = defaultConfig.versionName
            signingConfig signingConfigs.release

            ext {
                MTAssetID = "LaA8aiRBha2BcC6PCqMuK8xzZqdA3Lb6VVv41K"
                MassAssetID = "La4szjzKfJyHQ75qgDEnbzp4qY8GQeDR5Z7h2W"
                RMCAssetID = "La4aGUPuNKZyC393pS2Nb4RJdk2WvmoaAdrRLZ"
                RMCApiClientURL = "https://rmc-ico.gear.mycelium.com/api/"
                ColoredCoinsApiURLs = '{"https://coloredcoinsd.gear.mycelium.com/v3/", "https://api.coloredcoins.org/v3/"}'
                ColuBlockExplorerApiURLs = '{"https://coloredcoins.gear.mycelium.com/api/", "https://explorer.coloredcoins.org/api/"}'
                RMCChangeAddress = "18c91fJmVg7btPjxpwrhgwd37GkVghq9me"
            }
        }
        dev {
            // use Sdk21 for dev only - this allows to use native MultiDex without going through proguard (faster)
            compileSdkVersion 21
            buildToolsVersion androidSdkBuildVersion
            minSdkVersion 21

            // if we are not on master, include the branchname in appId
            def appId = 'com.mycelium.devwallet';
            def branch = getGitCurrentBranch()

            if (branch != "" && branch != "master") {
                appId = appId + "_" + branch.replaceAll("-", "_")
                versionName = defaultConfig.versionName + "-DEV_" + branch
            }

            applicationId appId
            signingConfig signingConfigs.debug

            ext {
                MTAssetID = "La3JCiNMGmc74rcfYiBAyTUstFgmGDRDkGGCRM"
                MassAssetID = "La4szjzKfJyHQ75qgDEnbzp4qY8GQeDR5Z7h2W"
                RMCAssetID = "La8yFVyKmHGf4KWjcPqATZeTrSxXyzB3JRPxDc"
                RMCApiClientURL = "https://rmc-ico-test.gear.mycelium.com/api/"
                ColoredCoinsApiURLs = '{"http://testnet.api.coloredcoins.org/v3/"}'
                ColuBlockExplorerApiURLs = '{"http://testnet.explorer.coloredcoins.org/api/"}'
                RMCChangeAddress = "mx92L6iuCfxQUz4cLNU4jJpfWbavVHgYj9"
            }
        }
        devprod {
            // use Sdk21 for dev only - this allows to use native MultiDex without going through proguard (faster)
            compileSdkVersion 21
            buildToolsVersion androidSdkBuildVersion
            minSdkVersion 21

            def appId = 'com.mycelium.devprodwallet';

            applicationId appId
            signingConfig signingConfigs.debug

            ext {
                MTAssetID = "LaA8aiRBha2BcC6PCqMuK8xzZqdA3Lb6VVv41K"
                MassAssetID = "La4szjzKfJyHQ75qgDEnbzp4qY8GQeDR5Z7h2W"
                RMCAssetID = "La3bgndN7QSYqV8pWuuqbfBPyHMZRK14Tb2BPg"
                RMCApiClientURL = "https://rmc-ico-stg.gear.mycelium.com/api/"
                ColoredCoinsApiURLs = '{"https://coloredcoinsd.gear.mycelium.com/v3/", "https://api.coloredcoins.org/v3/"}'
                ColuBlockExplorerApiURLs = '{"https://coloredcoins.gear.mycelium.com/api/", "https://explorer.coloredcoins.org/api/"}'
                RMCChangeAddress = "18c91fJmVg7btPjxpwrhgwd37GkVghq9me"
            }
        }
        btctestnet {
            compileSdkVersion 19
            targetSdkVersion 19
            minSdkVersion 14

            applicationId 'com.mycelium.testnetwallet'
            versionName = defaultConfig.versionName + '-TESTNET'
            signingConfig signingConfigs.btctestnet

            ext {
                MTAssetID = "La3JCiNMGmc74rcfYiBAyTUstFgmGDRDkGGCRM"
                MassAssetID = "La4szjzKfJyHQ75qgDEnbzp4qY8GQeDR5Z7h2W"
                RMCAssetID = "La8yFVyKmHGf4KWjcPqATZeTrSxXyzB3JRPxDc"
                RMCApiClientURL = "https://rmc-ico-test.gear.mycelium.com/api/"
                ColoredCoinsApiURLs = '{"http://testnet.api.coloredcoins.org/v3/"}'
                ColuBlockExplorerApiURLs = '{"http://testnet.explorer.coloredcoins.org/api/"}'
                RMCChangeAddress = "mx92L6iuCfxQUz4cLNU4jJpfWbavVHgYj9"
            }
        }
    }

    applicationVariants.all { variant ->
        def flavor = variant.productFlavors[0]
        variant.buildConfigField "String", "MTAssetID", "\"${flavor.ext.MTAssetID}\""
        variant.buildConfigField "String", "MassAssetID", "\"${flavor.ext.MassAssetID}\""
        variant.buildConfigField "String", "RMCAssetID", "\"${flavor.ext.RMCAssetID}\""
        variant.buildConfigField "String", "RMCApiClientURL", "\"${flavor.ext.RMCApiClientURL}\""
        variant.buildConfigField "String[]", "ColoredCoinsApiURLs", "${flavor.ext.ColoredCoinsApiURLs}"
        variant.buildConfigField "String[]", "ColuBlockExplorerApiURLs", "${flavor.ext.ColuBlockExplorerApiURLs}"
        variant.buildConfigField "String", "RMCChangeAddress", "\"${flavor.ext.RMCChangeAddress}\""
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

if (commonDebugKeystore.exists()) {
    android.buildTypes.debug.signingConfig = android.signingConfigs.commonDebug
    android.productFlavors.dev.signingConfig = android.signingConfigs.commonDebug
    logger.info("keytore_debug detected")
}

if (project.hasProperty('prodKeyStore') &&
        project.hasProperty('prodKeyAlias') &&
        project.hasProperty('prodKeyStorePassword') &&
        project.hasProperty('prodKeyAliasPassword')) {
    android.signingConfigs.release.storeFile = file('../../' + prodKeyStore)
    android.signingConfigs.release.keyAlias = prodKeyAlias
    android.signingConfigs.release.storePassword = prodKeyStorePassword
    android.signingConfigs.release.keyPassword = prodKeyAliasPassword
} else {
    android.productFlavors.prodnet.signingConfig = null
}

if (project.hasProperty('testKeyStore') &&
        project.hasProperty('testKeyAlias') &&
        project.hasProperty('testKeyStorePassword') &&
        project.hasProperty('testKeyAliasPassword')) {
    android.signingConfigs.btctestnet.storeFile = file('../../' + testKeyStore)
    android.signingConfigs.btctestnet.keyAlias = testKeyAlias
    android.signingConfigs.btctestnet.storePassword = testKeyStorePassword
    android.signingConfigs.btctestnet.keyPassword = testKeyAliasPassword
} else {
    android.productFlavors.btctestnet.signingConfig = null
}

static def getGitCommitCount() {
    def process = "git rev-list HEAD --count".execute()
    return process.text.toInteger()
}

static def getLongGitHash() {
    def process = "git rev-parse HEAD".execute()
    return process.text.toString().trim()
}

static def getGitRepoUrl() {
    def process = "git remote get-url origin --push".execute()
    return process.text.toString().replace(".git", "").trim()
}

static def getGitCommitUrl() {
    return getGitRepoUrl() + "/commit/" + getLongGitHash()
}

static def getGitCurrentBranch() {
    def process = "git rev-parse --abbrev-ref HEAD".execute()
    return process.text.toString().trim()
}
